<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KCDModMerger</name>
    </assembly>
    <members>
        <member name="M:KCDModMerger.Logger.Log(System.String,System.Boolean)">
            <summary>
            Writes the given string to the log file
            </summary>
            <param name="message"></param>
            <param name="addExclamation"></param>
        </member>
        <member name="M:KCDModMerger.Logger.Log(System.Text.StringBuilder)">
            <summary>
            Writes a StringBuilder to the log file
            </summary>
            <param name="stringBuilder"></param>
        </member>
        <member name="M:KCDModMerger.Logger.BuildLog(System.String,System.Boolean)">
            <summary>
            Returns the processed message without a date
            </summary>
            <param name="message"></param>
            <param name="addExclamation"></param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.Logger.BuildLogWithDate(System.String,System.Boolean)">
            <summary>
            Returns the processed message with a date
            </summary>
            <param name="message"></param>
            <param name="addExclamation"></param>
            <returns></returns>
        </member>
        <member name="T:KCDModMerger.Mods.ModFile">
            <summary>
            ModFile class
            </summary>
        </member>
        <member name="M:KCDModMerger.Mods.ModFile.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KCDModMerger.Mods.ModFile"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="modName">Name of the mod.</param>
            <param name="filePath">The file path.</param>
            <param name="pakFile">The pak file.</param>
        </member>
        <member name="P:KCDModMerger.Mods.ModFile.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:KCDModMerger.Mods.ModFile.ModName">
            <summary>
            Gets or sets the name of the mod.
            </summary>
            <value>
            The name of the mod.
            </value>
        </member>
        <member name="P:KCDModMerger.Mods.ModFile.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="P:KCDModMerger.Mods.ModFile.PakFile">
            <summary>
            Gets or sets the pak file.
            </summary>
            <value>
            The pak file.
            </value>
        </member>
        <member name="M:KCDModMerger.Mods.ModFile.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:KCDModMerger.Mods.ModFile.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:KCDModMerger.Mods.ModFile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KCDModMerger.Mods.ModFile.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:KCDModMerger.Mods.ModManifest.#ctor(System.String,System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:KCDModMerger.Mods.ModManifest"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="logger">The logger. Can be either null or a StringBuilder to append its output to the parent process.</param>
        </member>
        <member name="M:KCDModMerger.Mods.ModManifest.ReadManifest">
            <summary>
            Reads the manifest.
            </summary>
        </member>
        <member name="M:KCDModMerger.Mods.ModManifest.HasProperty(System.Object,System.String)">
            <summary>
            Determines whether the specified dynamic has property.
            </summary>
            <param name="dyn">The dynamic.</param>
            <param name="property">The property.</param>
            <returns>
              <c>true</c> if the specified dynamic has property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.#ctor(System.String,System.Text.StringBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:KCDModMerger.Mods.Mod" /> class.
            </summary>
            <param name="folderName">Name of the folder.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.FindPaks(System.Text.StringBuilder)">
            <summary>
                Finds the paks.
            </summary>
            <param name="logBuilder">The log builder.</param>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.FindFilesInZIP(KCDModMerger.Mods.ModFile,System.String,System.Text.StringBuilder)">
            <summary>
                Finds the files in zip.
            </summary>
            <param name="file">The file.</param>
            <param name="filename">The filename.</param>
            <param name="logBuilder">The log builder.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.ManagePaks(System.Text.StringBuilder)">
            <summary>
                Manages the paks.
            </summary>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.CheckForRar(System.String,System.String,System.Text.StringBuilder)">
            <summary>
                Checks for rar.
            </summary>
            <param name="file">The file.</param>
            <param name="filename">The filename.</param>
            <param name="logBuilder">The log builder.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.GetFolders(System.String)">
            <summary>
                Gets all folders.
            </summary>
            <param name="baseFolder">The base folder.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.Mods.Mod.GetPaks(System.String)">
            <summary>
                Gets all paks.
            </summary>
            <param name="folder">The folder.</param>
            <returns></returns>
        </member>
        <member name="T:KCDModMerger.OSVersionInfo">
            <summary>
                Provides detailed information about the host operating system.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.ServicePack">
            <summary>
                Gets the service pack information of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.ProgramBits">
            <summary>
                Determines if the current application is 32 or 64-bit.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.ProcessorBits">
            <summary>
                Determines if the current processor is 32 or 64-bit.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.Edition">
            <summary>
                Gets the edition of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.Name">
            <summary>
                Gets the name of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.BuildVersion">
            <summary>
                Gets the build version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.VersionString">
            <summary>
                Gets the full version string of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.Version">
            <summary>
                Gets the full version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.MajorVersion">
            <summary>
                Gets the major version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.MinorVersion">
            <summary>
                Gets the minor version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:KCDModMerger.OSVersionInfo.RevisionVersion">
            <summary>
                Gets the revision version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:KCDModMerger.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:KCDModMerger.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:KCDModMerger.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:KCDModMerger.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:KCDModMerger.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:KCDModMerger.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:KCDModMerger.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:KCDModMerger.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:KCDModMerger.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:KCDModMerger.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:KCDModMerger.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:KCDModMerger.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:KCDModMerger.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:KCDModMerger.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:KCDModMerger.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:KCDModMerger.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:KCDModMerger.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:KCDModMerger.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:KCDModMerger.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:KCDModMerger.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:KCDModMerger.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:KCDModMerger.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:KCDModMerger.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:KCDModMerger.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:KCDModMerger.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:KCDModMerger.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:KCDModMerger.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:KCDModMerger.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:KCDModMerger.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:KCDModMerger.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:KCDModMerger.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:KCDModMerger.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:KCDModMerger.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:KCDModMerger.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:KCDModMerger.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:KCDModMerger.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:KCDModMerger.UIUtilities.InvokeIfRequired(System.Windows.Controls.Control,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Invokes if required.
            </summary>
            <param name="control">The control.</param>
            <param name="action">The action.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:KCDModMerger.UIUtilities.DisableButton(System.Windows.Controls.Button,System.String)">
            <summary>
            Disables the button.
            </summary>
            <param name="button">The button.</param>
            <param name="tooltip">The tooltip.</param>
        </member>
        <member name="M:KCDModMerger.UIUtilities.EnableButton(System.Windows.Controls.Button,System.String)">
            <summary>
            Enables the button.
            </summary>
            <param name="button">The button.</param>
            <param name="tooltip">The tooltip.</param>
        </member>
        <member name="M:KCDModMerger.UIUtilities.IsDefault``1(``0)">
            <summary>
            Determines whether this instance is default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is default; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:KCDModMerger.App">
            <summary>
                Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:KCDModMerger.App.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KCDModMerger.App"/> class.
            </summary>
        </member>
        <member name="M:KCDModMerger.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:KCDModMerger.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:KCDModMerger.MainWindow">
            <summary>
                Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:KCDModMerger.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KCDModMerger.MainWindow"/> class.
            </summary>
        </member>
        <member name="P:KCDModMerger.MainWindow.ModMana">
            <summary>
            Gets the modmanager.
            </summary>
            <value>
            The ModManager.
            </value>
        </member>
        <member name="M:KCDModMerger.MainWindow.InitializeMergeWorker">
            <summary>
            Initializes the merge worker.
            </summary>
        </member>
        <member name="M:KCDModMerger.MainWindow.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="M:KCDModMerger.MainWindow.InitializePerformanceWatchers">
            <summary>
            Initializes the performance watchers.
            </summary>
        </member>
        <member name="M:KCDModMerger.MainWindow.InvokeIfRequired(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Invokes if required.
            </summary>
            <param name="action">The action.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.WorkerOnRunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Workers the on run worker completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="runWorkerCompletedEventArgs">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.WorkerOnProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Workers the on progress changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="progressChangedEventArgs">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.WorkerDoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Workers the do work.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.UpdateUsages(System.Object)">
            <summary>
            Updates the usages.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.ModManaChangeListener(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Modsmanager change listener.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.UpdateConflicts">
            <summary>
            Updates the conflicts.
            </summary>
        </member>
        <member name="M:KCDModMerger.MainWindow.KcdFolderDialogButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the KcdFolderDialogButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.modList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the modList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.humanReadableInfoChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Humans readable information changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.conflictFilesList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the conflictFilesList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.launchKdiff_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the launchKdiff control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.conflictingModsList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the conflictingModsList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.mergeButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the mergeButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.clearCache_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the clearCache control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.openLogFile_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the openLogFile control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.AdditonalInformationExpander_OnCollapsed(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the OnCollapsed event of the AdditonalInformationExpander control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.AdditonalInformationExpander_OnExpanded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the OnExpanded event of the AdditonalInformationExpander control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.TextBox_OnLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the OnLostFocus event of the TextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KCDModMerger.ModManager"/> class.
            </summary>
        </member>
        <member name="E:KCDModMerger.ModManager.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.Update">
            <summary>
            Updates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.RunKDiff3(System.String)">
            <summary>
            Runs the kdiff3.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:KCDModMerger.ModManager.CreateModdingDirectory">
            <summary>
            Creates the modding directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.CopyMergedToMods">
            <summary>
            Copies the merged files to mods.
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.CopyFilesRecursively(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies the files recursively.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:KCDModMerger.ModManager.MergeFiles(System.String,System.String)">
            <summary>
            Merges the files.
            </summary>
            <param name="baseFile">The base file.</param>
            <param name="overwriteFile">The overwrite file.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.ExtractFile(KCDModMerger.Mods.ModFile)">
            <summary>
            Extracts the file from zip.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.ExtractVanillaFile(KCDModMerger.Mods.ModFile)">
            <summary>
            Extracts the vanilla file from zip.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.PakData">
            <summary>
            Paks the data.
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.PakLocalization">
            <summary>
            Paks the localization.
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.CreateDirectories(KCDModMerger.Mods.ModFile,System.Boolean)">
            <summary>
            Creates the directories.
            </summary>
            <param name="file">The file.</param>
            <param name="vanilla">if set to <c>true</c> creates directories for vanilla file.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.FindVanillaDataFile(System.String)">
            <summary>
            Finds the vanilla data file.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.SaveVanillaFilePaths(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Saves the vanilla file paths.
            </summary>
            <param name="saved">The saved.</param>
        </member>
        <member name="M:KCDModMerger.ModManager.ScanDataDir">
            <summary>
            Scans the data dir.
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.UpdateModList">
            <summary>
            Updates the mod list.
            The actual Update is threaded!
            </summary>
        </member>
        <member name="M:KCDModMerger.ModManager.GetFolders(System.String)">
            <summary>
            Gets all folders.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.SettingsChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Settings changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KCDModMerger.ModManager.GetTotalFreeSpace(System.String)">
            <summary>
            Gets the total free space.
            </summary>
            <param name="driveName">The drive name.</param>
            <returns></returns>
        </member>
        <member name="M:KCDModMerger.ModManager.DeleteFolder(System.String)">
            <summary>
            Deletes the folder.
            </summary>
            <param name="folder">The folder.</param>
        </member>
        <member name="T:Schematrix.DataAvailableHandler">
            <summary>
            Represents the method that will handle data available events
            </summary>
        </member>
        <member name="T:Schematrix.ExtractionProgressHandler">
            <summary>
            Represents the method that will handle extraction progress events
            </summary>
        </member>
        <member name="T:Schematrix.MissingVolumeHandler">
            <summary>
            Represents the method that will handle missing archive volume events
            </summary>
        </member>
        <member name="T:Schematrix.NewVolumeHandler">
            <summary>
            Represents the method that will handle new volume events
            </summary>
        </member>
        <member name="T:Schematrix.NewFileHandler">
            <summary>
            Represents the method that will handle new file notifications
            </summary>
        </member>
        <member name="T:Schematrix.PasswordRequiredHandler">
            <summary>
            Represents the method that will handle password required events
            </summary>
        </member>
        <member name="T:Schematrix.Unrar">
            <summary>
            Wrapper class for unrar DLL supplied by RARSoft.  
            Calls unrar DLL via platform invocation services (pinvoke).
            DLL is available at http://www.rarlab.com/rar/UnRARDLL.exe
            </summary>
        </member>
        <member name="T:Schematrix.Unrar.OpenMode">
            <summary>
            Mode in which archive is to be opened for processing.
            </summary>
        </member>
        <member name="F:Schematrix.Unrar.OpenMode.List">
            <summary>
            Open archive for listing contents only
            </summary>
        </member>
        <member name="F:Schematrix.Unrar.OpenMode.Extract">
            <summary>
            Open archive for testing or extracting contents
            </summary>
        </member>
        <member name="E:Schematrix.Unrar.DataAvailable">
            <summary>
            Event that is raised when a new chunk of data has been extracted
            </summary>
        </member>
        <member name="E:Schematrix.Unrar.ExtractionProgress">
            <summary>
            Event that is raised to indicate extraction progress
            </summary>
        </member>
        <member name="E:Schematrix.Unrar.MissingVolume">
            <summary>
            Event that is raised when a required archive volume is missing
            </summary>
        </member>
        <member name="E:Schematrix.Unrar.NewFile">
            <summary>
            Event that is raised when a new file is encountered during processing
            </summary>
        </member>
        <member name="E:Schematrix.Unrar.NewVolume">
            <summary>
            Event that is raised when a new archive volume is opened for processing
            </summary>
        </member>
        <member name="E:Schematrix.Unrar.PasswordRequired">
            <summary>
            Event that is raised when a password is required before continuing
            </summary>
        </member>
        <member name="P:Schematrix.Unrar.ArchivePathName">
            <summary>
            Path and name of RAR archive to open
            </summary>
        </member>
        <member name="P:Schematrix.Unrar.Comment">
            <summary>
            Archive comment 
            </summary>
        </member>
        <member name="P:Schematrix.Unrar.CurrentFile">
            <summary>
            Current file being processed
            </summary>
        </member>
        <member name="P:Schematrix.Unrar.DestinationPath">
            <summary>
            Default destination path for extraction
            </summary>
        </member>
        <member name="P:Schematrix.Unrar.Password">
            <summary>
            Password for opening encrypted archive
            </summary>
        </member>
        <member name="M:Schematrix.Unrar.Close">
            <summary>
            Close the currently open archive
            </summary>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.Open">
            <summary>
            Opens archive specified by the ArchivePathName property for testing or extraction
            </summary>
        </member>
        <member name="M:Schematrix.Unrar.Open(Schematrix.Unrar.OpenMode)">
            <summary>
            Opens archive specified by the ArchivePathName property with a specified mode
            </summary>
            <param name="openMode">Mode in which archive should be opened</param>
        </member>
        <member name="M:Schematrix.Unrar.Open(System.String,Schematrix.Unrar.OpenMode)">
            <summary>
            Opens specified archive using the specified mode.  
            </summary>
            <param name="archivePathName">Path of archive to open</param>
            <param name="openMode">Mode in which to open archive</param>
        </member>
        <member name="M:Schematrix.Unrar.ReadHeader">
            <summary>
            Reads the next archive header and populates CurrentFile property data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.ListFiles">
            <summary>
            Returns array of file names contained in archive
            </summary>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.Skip">
            <summary>
            Moves the current archive position to the next available header
            </summary>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.Test">
            <summary>
            Tests the ability to extract the current file without saving extracted data to disk
            </summary>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.Extract">
            <summary>
            Extracts the current file to the default destination path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.Extract(System.String)">
            <summary>
            Extracts the current file to a specified destination path and filename
            </summary>
            <param name="destinationName">Path and name of extracted file</param>
            <returns></returns>
        </member>
        <member name="M:Schematrix.Unrar.ExtractToDirectory(System.String)">
            <summary>
            Extracts the current file to a specified directory without renaming file
            </summary>
            <param name="destinationPath"></param>
            <returns></returns>
        </member>
    </members>
</doc>
